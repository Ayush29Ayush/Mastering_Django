1. Create a virtual environment using the command: python -m venv venv
2. Activate the virtual environment using the command: venv\Scripts\activate
3. Store the dependencies in the requirements.txt file using the command: pip freeze > requirements.txt
4. Install the dependencies using the command: pip install -r requirements.txt
5. Type django-admin in the command line to see the available commands

#! Creating new project and app
6. Create a new project using the command: django-admin startproject firstproject .
7. Create an app using the command: python manage.py startapp firstapp
8. Add the app to the settings.py file installed apps

#! Database Schema Designing
9. Understand the requirement and create a database schema with relationships like one to one, one to many, many to many.

#! Creating models, model functions and model managers
10. Create models and use command python manage.py makemigrations to create migrations and python manage.py migrate to migrate the changes to the database.
11. Its better to use classmethod rather than using staticmethod for creating such custom functions
12. Model Manager is present in the model by default. Since we want to use our custom manager, we are defining objects = CartManager(), otherwise by default, it will use its default django manager. This is the objects in the Cart.objects.create() command, which we want to override so we are using create_cart rather than the default create. Now the command will be Cart.objects.create_cart() rather than Cart.objects.create()

#! All about django admin page
13. Register models in admin.py to view and manage data on admin page using admin.site.register(ModelName)
14. We have created custom admin class CartAdmin by inheriting from admin.ModelAdmin. We can override default admin functionality like list_display, search_fields etc.

#! All about Custom User Model
15. Create a custom user model by inheriting from AbstractUser or by inheriting (AbstractBaseUser, PermissionsMixin) and override required fields.
16. Register the custom user model in admin.py and settings.py AUTH_USER_MODEL.
17. Create custom managers and forms for the custom user model.

#! All about Django Multiple User Types
18. To use multiselect in a form, use this package => https://pypi.org/project/django-multiselectfield/
19. Check all the 3 approaches to create user types in the models.py file.
20. Register the models in admin.py.